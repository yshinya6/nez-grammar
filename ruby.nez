/*
 * Ruby 2.x
 * author : Mai MaiCuong
*/
File                                 = { $(CompleteStatement) #Source }

//-----------------------------------------
EOS                                  = _ ';'
                                     / _ LINE_TERMINATOR
                                     / _ COMMENT LINE_TERMINATOR

LINE_TERMINATOR                      = [\n\r\u2028\u2029]
COMMENT                              = '#' ( !LINE_TERMINATOR . )*
__                                   = SPACE_OR_NEWLINE*
SPACE_OR_NEWLINE                     = SPACE
                                     / LINE_TERMINATOR
                                     / COMMENT
SPACE                                = [\t\v\f \u00A0\uFEFF]
EOF                                  = !.
_                                    = SPACE*

//-------------------------------------------------------
CompleteStatement                    = { $(StatementOrBegin) ( EOS* _ $(StatementOrBegin) )* EOS* _ #BlockExpression }
                                     / EOS* _ { #Empty }
StatementOrBegin                     = InitializerStatement
                                     / '{' __ CompleteStatement __ '}'
                                     / DecoratorStatement
InitializerStatement                 = { 'BEGIN' __ '{' __ $(CompleteStatement) __ '}' #Initializer }
DecoratorStatement                   = NoDecorationStatement {$ _ addDecorator _ $(Expression) }*
NoDecorationStatement                = AliasStatement
                                     / UndefStatement
                                     / FinalizerStatement
                                     / Expression
AliasStatement                       = { "alias" _ $(FunctionName) _ $(FunctionName) #Alias }
UndefStatement                       = { "undef" ( _ ($(FunctionName) / $(Symbol)) )+ }
FinalizerStatement                   = { 'END' __ '{' __ $(CompleteStatement) __ '}' #Finalizer }
Symbol                               = ":" _ { FUNCTION_NAME #Symbol }
                                     / ":" _ { VARIABLE_NAME #Symbol }
addDecorator                         = "if" #IfDecorator
                                     / "while" #WhileDecorator
                                     / "unless" #UnlessDecorator
                                     / "until" #UntilDecorator
                                     / "rescue" #RescueDecorator
Expression                           = { $(MultipleLeftHandSideExpression) __ "=" __ $(MultipleRightHandSideExpression) #MultipleAssign }
                                     / KeywordLogicalExpression
                                     / ControlExpression
MultipleLeftHandSideExpression       = '(' _ MultipleLeftHandSideExpression _ ')'
                                     / { $(LHSListItem) ( _ ',' _ $(LHSListItem) )+ ( _ ',' _ $(LHSExpandExpression) )? #MultipleLeftHandSideExpression }
                                     / { $(LHSListItem) _ ',' _ $(LHSExpandExpression) #MultipleLeftHandSideExpression }
                                     / { $(LHSListItem) ( _ ',' _ $(LHSListItem) )* _ ',' #MultipleLeftHandSideExpression }
                                     / LHSExpandExpression
LHSListItem                          = LeftHandSideExpression
                                     / '(' __ MultipleLeftHandSideExpression __ ')'
LeftHandSideExpression               = PrimaryExpression {$ addLHSCall }+
                                     / PrimaryLHSExpression
PrimaryExpression                    = '(' __ CompleteStatement __ ')'
                                     / Literal
                                     / HereDocument
                                     / ArrayLiteral
                                     / HashLiteral
                                     / LambdaExpression
                                     / Variable !( _ [({] )
                                     / PrimaryCallExpression
                                     / ConstantExpression
                                     / <if StatementAsPrimary> StatementLikeExpression

/* Literal */
Literal                              = NumericLiteral
                                     / StringLiteral
                                     / RegularExpressionLiteral
                                     / Symbol
                                     / ParcentNotation
NumericLiteral                       = HexIntegerLiteral
                                     / BinaryIntegerLiteral
                                     / FloatingPointLiteral
                                     / DecimalLiteral
                                     / OctalIntegerLiteral
HexIntegerLiteral                    = { '0' [xX] HEX+ #HexInteger }
BinaryIntegerLiteral                 = { '0' [bB] [01_]+ #BinaryInteger }
FloatingPointLiteral                 = { DECIMAL_INTEGER '.' DIGIT+ EXPONENT_PART? #Float }
                                     / { DECIMAL_INTEGER EXPONENT_PART #Float }
DECIMAL_INTEGER                      = [1-9] DIGIT*
                                     / '0'
EXPONENT_PART                        = [eE] SIGN? DIGIT*
SIGN                                 = '+'
                                     / '-'
DecimalLiteral                       = { [1-9] DIGIT* #Integer }
                                     / '0' [dD] { DIGIT+ #Integer }
OctalIntegerLiteral                  = { '0' ([oO] OCT+ / OCT*) #OctalInteger }
OCT                                  = [0-7_]
StringLiteral                        = ["] { DOUBLE_STRING_CHARACTER* #String } ["]
                                     / ['] { SINGLE_STRING_CHARACTER* #String } [']
                                     / [`] { BACK_STRING_CHARACTER* #Command } [`]
                                     / '?' { '\\' ESCAPE_SEQUENCE / !SPACE_OR_NEWLINE . #String }
DOUBLE_STRING_CHARACTER              = !( ["] / '\\' / LINE_TERMINATOR ) SOURCE
                                     / '\\' ESCAPE_SEQUENCE
SOURCE                               = .
ESCAPE_SEQUENCE                      = '\\'
                                     / ["'bfnrtv]
                                     / OCTA_ESCAPE_SEQUENCE
                                     / HEX_ESCAPE_SEQUENCE
                                     / UNICODE_ESCAPE_SEQUUENCE
                                     / LINE_TERMINATOR
                                     / .
OCTA_ESCAPE_SEQUENCE                 = OCT OCT OCT
HEX_ESCAPE_SEQUENCE                  = [xX] HEX HEX
UNICODE_ESCAPE_SEQUUENCE             = [uU] HEX4
SINGLE_STRING_CHARACTER              = !( ['] / '\\' / LINE_TERMINATOR ) SOURCE
                                     / '\\' ESCAPE_SEQUENCE
BACK_STRING_CHARACTER                = !( [`] / '\\' / LINE_TERMINATOR ) SOURCE
                                     / '\\' ESCAPE_SEQUENCE
RegularExpressionLiteral             = { '/' REGEX_BODY? '/' REGEX_FLAGS #RegularExp }
REGEX_BODY                           = REGEX_FIRST_CHAR REGEX_CHAR*
REGEX_FIRST_CHAR                     = REGEX_BACKSLASH_SEQUENCE
                                     / ![*\\/\x5b] REGEX_NON_TERMINATOR
                                     / REGEX_CLASS
REGEX_BACKSLASH_SEQUENCE             = '\\' REGEX_NON_TERMINATOR
REGEX_NON_TERMINATOR                 = !LINE_TERMINATOR SOURCE
REGEX_CLASS                          = '[' REGEX_CLASS_CHAR* ']'
REGEX_CLASS_CHAR                     = ![\x5d\\] REGEX_NON_TERMINATOR
                                     / REGEX_BACKSLASH_SEQUENCE
REGEX_CHAR                           = '*'
                                     / REGEX_FIRST_CHAR
REGEX_FLAGS                          = [gimsy]*
ParcentNotation                      = { "%" [wWiI] PN_BODY #ParcentNotation }
                                     / { "%" [qQxrs]? PN_BODY #ParcentNotation }
PN_BODY                              = PN_PAREN
                                     / PN_BRACE
                                     / PN_BRAKET
                                     / PN_ANGLE
                                     / ' ' ( !' ' . )* ' '
                                     / ( !LINE_TERMINATOR . )*
PN_PAREN                             = '(' ( PN_PAREN / ![()] . )* ')'
PN_BRACE                             = '{' ( PN_BRACE / ![{}] . )* '}'
PN_BRAKET                            = '[' ( PN_BRAKET / ![\[\]] . )* ']'
PN_ANGLE                             = "<" ( PN_ANGLE / ![<>] . )* ">"
HereDocument                         = { "<<" "-"? (["] ["] / ['] ['] / [`] [`]) ( !HD_NEWLINE . )* HD_NEWLINE ( ( !HD_NEWLINE . )* HD_NEWLINE )* _ HD_NEWLINE #HereDocument }
HD_NEWLINE                           = LINE_TERMINATOR
ArrayLiteral                         = { '[' ( __ addArgsNoAssoc ( __ ',' __ $({ addAssocs #Hash }) )? )? __ ( ',' __ )? ']' #Array }
                                     / { '[' ( __ $({ addAssocs #Hash }) )? __ ( ',' __ )? ']' #Array }
HashLiteral                          = { '{' __ ( addAssocs ( __ ',' __ )? )? __ '}' #Hash }
LambdaExpression                     = { '->' __ addLambdaParameter __ $(LambdaBody) #Function }
addLambdaParameter                   = '(' __ $(ParamOrEmptyList) __ ')'
                                     / $(ParamOrEmptyList)
ParamOrEmptyList                     = ParameterList
                                     / EmptyList
ParameterList                        = { $(BlockParameter) #List }
                                     / { $(VariadicParameter) ( __ "," __ $(BlockParameter) )? #List }
                                     / { addParameterAssocs ( __ "," __ $(VariadicParameter) )? ( __ "," __ $(BlockParameter) )? #List }
                                     / { addParameters ( __ "," __ addParameterAssocs )? ( __ "," __ $(VariadicParameter) )? ( __ "," __ $(BlockParameter) )? #List }
VariadicParameter                    = { "*" $(Identifier) #VariadicParameter }
addParameterAssocs                   = $(DefaultValueAssociation) ( __ "," __ $(DefaultValueAssociation) )*
DefaultValueAssociation              = { $(Identifier) __ "=" __ $(Arg) #Assign }
addParameters                        = $(Identifier) !( _ [=] ) ( __ "," __ $(Identifier) !( _ "=" ) )*
EmptyList                            = { #List }
LambdaBody                           = DoEndBlockWithoutParameter
                                     / BraceBlockWithoutParameter
DoEndBlockWithoutParameter           = "do" __ CompleteStatement __ "end"
BraceBlockWithoutParameter           = '{' __ CompleteStatement __ '}'
PrimaryCallExpression                = { $(DummySelf) $(OperationName) _ AddArguments #Apply }
                                     / { $(DummySelf) $(Super) ( _ AddArguments )? #Apply }
Super                                = { "super" #Super }
StatementLikeExpression              = IfExpression
                                     / UnlessExpression
                                     / WhileExpression
                                     / UntilExpression
                                     / CaseExpression
                                     / ForExpression
                                     / BeginExpression
                                     / ClassExpression
                                     / ModuleExpression
                                     / FunctionDefinition
                                     / EigenMethodDefinition
IfExpression                         = { "if" _ $cond(Expression) _ THEN __ $then(CompleteStatement) ( elseClause / elsifClause )? _ "end" #If }
elsifClause                          = $(ElsifClause)
ElsifClause                          = { "elsif" _ $cond(Expression) _ THEN __ $then(CompleteStatement) ( elseClause / elsifClause )? #If }
elseClause                           = "else" EOS* _ $else(CompleteStatement)
UnlessExpression                     = { "unless" _ $cond(Expression) _ THEN __ $else(CompleteStatement) __ elseClause? __ "end" #Unless }
THEN                                 = "then"
                                     / EOS ( __ "then" )?
WhileExpression                      = { "while" _ <on !DoExpr $cond(Expression) > _ DO __ $body(CompleteStatement) __ "end" #While }
DO                                   = "do"
                                     / EOS ( __ "do" )?
UntilExpression                      = { "until" _ <on !DoExpr $(Expression) > _ DO __ $(CompleteStatement) __ "end" #Until }
CaseExpression                       = { "case" _ $(Expression) EOS __ $(CaseList) __ elseClause? __ "end" #Case }
CaseList                             = { ( "when" _ $(WhenArgs) _ THEN __ $(CompleteStatement) __ )* #CaseList }
WhenArgs                             = { $(Args) ( _ ',' __ $(ExpandExpression) )? #List }
                                     / { $(ExpandExpression) #List }
ForExpression                        = { "for" _ $(BlockVar) _ "in" _ <on !DoExpr $(Expression)> _ DO __ $(CompleteStatement) __ "end" #For }
BeginExpression                      = { "begin" __ ( EOS __ )? addBeginBody __ "end" #Begin }
addBeginBody                         = $(CompleteStatement) ( __ EOS )? ( __ $(RescueList) )? ( __ "else" EOS __ $(CompleteStatement) )? ( __ "ensure" __ $(CompleteStatement) )?
RescueList                           = { $(RescueItem)+ ( __ EOS )? #List }
RescueItem                           = { "rescue" _ ( $(Args) _ )? ( "=>" _ $(LeftHandSideExpression) _ )? THEN __ $(CompleteStatement) #Rescue }
ClassExpression                      = { "class" __ $(Identifier) ( __ "<" __ $(BaseClass) )? EOS __ $(CompleteStatement) __ "end" #Class }
BaseClass                            = Expression
ModuleExpression                     = { "module" __ $(Identifier) __ $(CompleteStatement) __ "end" #Module }
FunctionDefinition                   = { "def" __ $name(FunctionName) _ addFunctionParameter __ $body(FunctionBody) __ "end" #FuncDecl }
addFunctionParameter                 = '(' __ $param(ParamOrEmptyList) __ ')' EOS?
                                     / $param(ParamOrEmptyList) EOS
FunctionBody                         = { addBeginBody #Begin }
EigenMethodDefinition                = { "def" __ $(Singleton) __ ('.' / '::') __ $(FunctionName) _ addFunctionParameter __ $(FunctionBody) __ "end" #EigenFunction }
Singleton                            = VariableName
                                     / SelfExpression
                                     / NilExpression
                                     / TrueExpression
                                     / FalseExpression
                                     / '(' __ Expression __ ')'
addLHSCall                           = '[' __ $(Args)? __ ']' #Indexer
                                     / _ addFuncName ( _ AddArguments &NEXT_CALL )? #Apply
Args                                 = { addArgs #List }
addArgs                              = $(Arg) ( __ ',' __ $(Arg) )*
Arg                                  = AssignmentExpression
AssignmentExpression                 = { $left(LeftHandSideExpression) _ addAssignmentOperator __ ($right(Command) / $right(UnwrapedArray) / $right(AssignmentExpression)) }
                                     / ConditionalExpression
addAssignmentOperator                = '=' #Assign
                                     / '*=' #AssignMul
                                     / '/=' #AssignDiv
                                     / '%=' #AssignMod
                                     / '**=' #AssignPower
                                     / '+=' #AssignAdd
                                     / '-=' #AssignSub
                                     / '<<=' #AssignLeftShift
                                     / '>>=' #AssignRightShift
                                     / '&=' #AssignBitwiseAnd
                                     / '^=' #AssignBitwiseXOr
                                     / '|=' #AssignBitwiseOr
                                     / '&&=' #AssignAnd
                                     / '||=' #AssignOr
Command                              = { $(DummySelf) $name(OperationName) !'[' !OPERATOR _ addCmdArguments #Apply }
                                     / { $(DummySelf) $name(OperationName2) !'[' !OPERATOR _ addCmdArguments? #Apply }
                                     / { $(BeforeCommandFunctionCallExpression) _ addFuncName _ addCmdArguments #Apply }
                                     / { "super" ( _ $(CmdArgs) )? #Super }
                                     / { "defined?" _ $(Arg) #Defined }
DummySelf                            = { `self` #Self }
OperationName                        = { IDENTIFIER [!?]? #Name }
OPERATOR                             = "|"
                                     / "^"
                                     / "&"
                                     / "<=>"
                                     / "=="
                                     / "==="
                                     / "=~"
                                     / ">"
                                     / ">="
                                     / "<"
                                     / "<="
                                     / "+"
                                     / "-"
                                     / "*"
                                     / "/"
                                     / "%"
                                     / "**"
                                     / "<<"
                                     / ">>"
                                     / "~"
                                     / "`"
                                     / "+@"
                                     / "-@"
                                     / "[]"
                                     / "[]="
addCmdArguments                      = $param(CmdArgs) ( _ $(BlockArgument) )?
                                     / $(BlockArgument)
CmdArgs                              = !'{' { (CmdArg (_ ',' _ CmdArg)* ) #List }
CmdArg                               = !WhileExpression !IfExpression !UntilExpression !UnlessExpression $(AssignmentExpression)
DoEndBlock                           = <if DoExpr> { "do" __ ( "|" __ $(BlockVar)? __ "|" __ )? $(CompleteStatement)? __ "end" #BlockArgument }
BlockVar                             = MultipleLeftHandSideExpression
                                     / { $(LeftHandSideExpression) #MultipleLeftHandSideExpression }
BlockArgument                        = DoEndBlock
                                     / BraceBlock
BraceBlock                           = { '{' __ ( '|' __ $(BlockVar)? __ '|' __ )? $(CompleteStatement)? __ '}' #BlockArgument }
OperationName2                       = { IDENTIFIER [!?] #Name }
BeforeCommandFunctionCallExpression  = { {$ $(AddBeforeCommandCall) }* }
AddBeforeCommandCall                 = { '[' __ $(Args)? __ ']' #Indexer }
                                     / { _ addFuncName (_ AddArguments / &NEXT_CALL) #Apply }
addFuncName                          = '.' __ $(OperationName)
                                     / '.' __ $(IdentifierName)
                                     / '::' __ $(Identifier)
                                     / ('.' / '::') __ $(FunctionName)
AddArguments                         = '(' __ ( $(CallArgs) __ )? ')' ( __ $(BlockArgument) )?
                                     / $(BlockArgument)
CallArgs                             = CallArgsBody
CallArgsBody                         = { $(Command) #List }
                                     / { $(BlockParameter) #List }
                                     / { $(ExpandExpression) ( __ "," __ $(BlockParameter) )? #List }
                                     / { addAssocs ( __ "," __ $(ExpandExpression) )? ( __ "," __ $(BlockParameter) )? #List }
                                     / { addArgsNoAssoc ( __ "," __ addAssocs )? ( __ "," __ $(ExpandExpression) )? ( __ "," __ $(BlockParameter) )? #List }
                                     / Args
BlockParameter                       = { "&" ($(Identifier) / $(Symbol)) #BlockParameter }
addAssocs                            = $(Association) ( __ "," __ $(Association) )*
Association                          = { $(Arg) __ "=>" __ $(Arg) #Assign }
                                     / { $(JsonStyleAssocSymbol) _ ":" __ $(Arg) #Assign }
addArgsNoAssoc                       = $(Arg) !( _ "=>" ) ( __ "," __ $(Arg) !( _ "=>" ) )*
JsonStyleAssocSymbol                 = { FUNCTION_NAME #Symbol }
                                     / { VARIABLE_NAME #Symbol }
FunctionName                         = { FUNCTION_NAME #Name }
FUNCTION_NAME                        = IDENTIFIER [!?]?
                                     / OPERATOR
                                     / ('__LINE__' / '__FILE__' / 'BEGIN' / 'END') [!?]?
                                     / KEYWORD [!?]?

example IfExpression '''
if a > 100 && b.zero? then
  puts "a is greater than 100 and b is 0"
elsif a > 100 then
  puts "a is greater than 100 and b is not 0"
elsif a == 100 then
  puts "a is equal to 100"
else
  puts "a is smaller than 100"
end
'''

example CaseExpression '''
case banana_num
when 1 then
  puts "Price: 20"
when 2,3,4 then
  puts "Price: 40"
when 5..8 then
  puts "Price: 80"
else
  puts "Unacceptable!"
end
'''

example UnlessExpression '''
unless lang == "Ruby" then
  puts "#{lang} is not Ruby"
else
  puts "Enjoy Ruby totorial"
end
'''

example ForExpression '''
for s in lang do
  puts s
end
'''

example ForExpression '''
for i in 1..3 do
  puts i
end
'''

example ForExpression '''
for for_cnt in 1..5 do
  loop_num += 1
  puts "(1) loop_num: #{loop_num}, for_count:#{for_cnt}"
  next if loop_num == 2
  redo if loop_num == 4
  puts "(2) loop_num: #{loop_num}, for_count:#{for_cnt}"
end
'''

example WhileExpression '''
while num < 5 do
  puts "num = #{num}"
  num = num + 1
end
'''

example UntilExpression '''
until num < 3 do
  puts "num = #{num}"
  num = num - 1
end
'''

example BeginExpression '''
begin
  puts "a" + 4  #文字列と数値の足し算のため例外発生
rescue => ex
  print "Class: ", ex.class, "\n"
  print "Massage: ", ex.message, "\n"
  puts "Backtrace:"
  ex.backtrace.each{|trace| puts trace}
ensure
  puts "Finish"
end
'''

example BeginExpression '''
begin
  raise "Exception!"
rescue => ex
  print "Massage: ", ex.message, "\n"
  puts "Backtrace:"
  ex.backtrace.each{|trace| puts trace}
end
'''

UnwrapedArray                        = { add2MoreArgs #Array }
add2MoreArgs                         = $(Arg) ( __ ',' __ $(Arg) )+
ConditionalExpression                = RangeExpression {$ _ '?' __ $(RangeExpression) __ ':' __ $(RangeExpression) #Trinary }*
RangeExpression                      = { $(LogicalORExpression) _ addRangeOperator __ $(LogicalORExpression) }
                                     / LogicalORExpression
addRangeOperator                     = '..' ('.' #OpenRange / #ClosedRange)
LogicalORExpression                  = LogicalANDExpression {$left _ '||' __ $right(LogicalANDExpression) #Or }*
LogicalANDExpression                 = EqualityExpression {$left _ '&&' __ $right(EqualityExpression) #And }*
EqualityExpression                   = RelationalExpression {$left _ addEqualityOperator __ $right(RelationalExpression) }*
addEqualityOperator                  = "==" #Equals
                                     / "!=" #NotEquals
                                     / "===" #StrictEquals
                                     / "<=>" #Compare
                                     / "=~" #Match
                                     / '!~' #NotMatch
RelationalExpression                 = BitwiseORExpression {$left _ addRelationalOperator __ $right(BitwiseORExpression) }*
addRelationalOperator                = "<=" #LessThanEquals
                                     / ">=" #GreaterThanEquals
                                     / "<" #LessThan
                                     / ">" #GreaterThan
BitwiseORExpression                  = BitwiseANDExpression {$left _ ("|" #BitwiseOr / "^" #BitwiseXor) __ $right(BitwiseANDExpression) }*
BitwiseANDExpression                 = ShiftExpression {$left (SPACE+ "&" SPACE_OR_NEWLINE+ / "&" __) $right(ShiftExpression) #BitwiseAnd }*
ShiftExpression                      = AdditiveExpression {$left (SPACE+ "<<" SPACE_OR_NEWLINE+ #LeftShift / "<<" __ #LeftShift / _ ">>" __ #RightShift) $right(AdditiveExpression) }*
AdditiveExpression                   = MultiplicativeExpression {$left (SPACE+ addAdditiveOperator SPACE_OR_NEWLINE+ / addAdditiveOperator __) $right(MultiplicativeExpression) }*
addAdditiveOperator                  = "+" #Add
                                     / "-" #Sub
MultiplicativeExpression             = UnaryMinusExpression {$left (SPACE+ addMultiplicativeOperator SPACE_OR_NEWLINE+ / addMultiplicativeOperator __) $right(UnaryMinusExpression) }*
addMultiplicativeOperator            = "*" #Mul
                                     / "%" #Mod
                                     / "/" #Div
UnaryMinusExpression                 = PowerExpression
                                     / { _ "-" #Minus _ $expr(UnaryMinusExpression) }
PowerExpression                      = UnaryExpression {$ _ "**" #Power __ $(UnaryExpression) }*
UnaryExpression                      = FunctionCallExpression
                                     / { addUnaryOperator $expr(UnaryExpression) }
addUnaryOperator                     = "+" #Plus
                                     / "~" #Invert
                                     / "!" #Not

example Expression 1+2
example Expression 1-2
example Expression 1*2
example Expression 1/2
example Expression 1%2
example Expression 1+2-3*4/5
example Expression a < b
example Expression a > b
example Expression a <= b
example Expression a >= b
example Expression a == b
example Expression a === b
example Expression a != b
example Expression a <=> b
example Expression a =~ b
example Expression a !~ b
example Expression +a
example Expression -a
example Expression !a
example Expression a || b
example Expression a && b
example Expression a | b
example Expression a & b
example Expression a ^ b
example Expression a >> b
example Expression a << b

FunctionCallExpression               = PrimaryExpression {$ addCall }*
addCall                              = '[' __ $(Args)? __ ']' #Indexer
                                     / _ addFuncName ( _ AddArguments)? #Apply
NEXT_CALL                            = '['
                                     / _ '.'
                                     / _ '::'

example Expression print a
example Expression print a, b, c
example FunctionCallExpression print(a)
example FunctionCallExpression print(a, b, c)
example Expression a[0]

PrimaryLHSExpression                 = Variable !( _ [({] )
                                     / ConstantExpression
Variable                             = VariableName
                                     / SelfExpression
                                     / NilExpression
                                     / TrueExpression
                                     / FalseExpression
                                     / FileExpression
                                     / LineExpression
VariableName                         = { VARIABLE_NAME #Name }
VARIABLE_NAME                        = GLOBAL_VARIABLE_NAME ![!?]
                                     / ( '@@' / '@' )? IDENTIFIER ![!?]
GLOBAL_VARIABLE_NAME                 = '$' IDENTIFIER
                                     / '$' !SPACE .
                                     / '$-' !SPACE .
SelfExpression                       = { "self" ![!?] #Self }
TrueExpression                       = { "true" ![!?] #True }
FalseExpression                      = { "false" ![!?] #False }
NilExpression                        = { "nil" ![!?] #Nil }
FileExpression                       = { '__FILE__' ![!?] #File }
LineExpression                       = { '__LINE__' ![!?] #Line }
ConstantExpression                   = { '::' _ $(Identifier) #Name }
Identifier                           = !KEYWORD IdentifierName
KEYWORD                              = "do"
                                     / "end"
                                     / "return"
                                     / "yield"
                                     / "defined?"
                                     / "if"
                                     / "elsif"
                                     / "else"
                                     / "unless"
                                     / "while"
                                     / "until"
                                     / "case"
                                     / "when"
                                     / "break"
                                     / "next"
                                     / "redo"
                                     / "for"
                                     / "in"
                                     / "begin"
                                     / "rescue"
                                     / "rescue"
                                     / "retry"
                                     / "ensure"
                                     / "class"
                                     / "module"
                                     / "def"
                                     / "alias"
                                     / "and"
                                     / "defined"
                                     / "false"
                                     / "nil"
                                     / "not"
                                     / "or"
                                     / "self"
                                     / "super"
                                     / "then"
                                     / "true"
                                     / "undef"
IdentifierName                       = { IDENTIFIER #Name }
IDENTIFIER                           = !KEYWORD IDENTIFIER_START IDENTIFIER_PART*
IDENTIFIER_START                     = [a-zA-Z$_]
                                     / UCHAR
IDENTIFIER_PART                      = IDENTIFIER_START
                                     / DIGIT
DIGIT                                = [0-9_]
LHSExpandExpression                  = { '*' $(LeftHandSideExpression) #Sprat }
MultipleRightHandSideExpression      = { addArgs ( _ ',' _ $(ExpandExpression) )? #MultipleRightHandSideExpression }
                                     / { $(ExpandExpression) #MultipleRightHandSideExpression }
ExpandExpression                     = { '*' $(Arg) #Sprat }
KeywordLogicalExpression             = KeywordNotExpression {$ __ addKeywordLogicalOperator __ $(KeywordLogicalOperandWithControl) #And }*
KeywordNotExpression                 = CommandNotExpression
                                     / AssignmentExpression
                                     / { __ "not" #Not _ $(KeywordNotExpression) }
CommandNotExpression                 = Command
                                     / { __ "!" #Not _ $(CommandNotExpression) }
KeywordOperator                      = { ' ' }

/////////////////////////////////////////
addKeywordLogicalOperator            = "and" #And
                                     / "or" #Or
KeywordLogicalOperandWithControl     = KeywordNotExpression
                                     / ControlExpression
ControlExpression                    = ReturnExpression
                                     / BreakExpression
                                     / NextExpression
                                     / RedoExpression
                                     / YieldExpression
ReturnExpression                     = { "return" _ '(' _ $(CallArgs) _ ')' #Return }
                                     / { "return" ( _ $(CmdArgs) )? #Return }
BreakExpression                      = { "break" _ '(' _ $(CallArgs) _ ')' #Break }
                                     / { "break" ( _ $(CmdArgs) )? #Break }
NextExpression                       = { "next" _ '(' _ $(CallArgs) _ ')' #Next }
                                     / { "next" ( _ $(CmdArgs) )? #Next }
RedoExpression                       = { "redo" _ '(' _ $(CallArgs) _ ')' #Redo }
                                     / { "redo" ( _ $(CmdArgs) )? #Redo }
YieldExpression                      = { "yield" _ '(' _ $(CallArgs) _ ')' #Redo }
                                     / { "yield" ( _ $(CmdArgs) )? #Redo }
W                                    = [a-zA-Z0-9_]
                                     / UCHAR
UCHAR                                = '\\u' HEX4
                                     / '\\U' HEX4 HEX4
HEX4                                 = HEX HEX HEX HEX
HEX                                  = [0-9a-fA-F_]
"&"                                  = '&' !'&'
"*"                                  = '*' !'='
"+"                                  = '+' ![+=]
"-"                                  = '-' !( '-' / [=>] )
"!"                                  = '!' ![=~]
":"                                  = ':' ![>]
"/"                                  = '/' !'='
"%"                                  = '%' ![=>]
"<<"                                 = '<<' !'='
">>"                                 = '>>' ![=>]
"<"                                  = '<' ![=]
">"                                  = '>' ![=]
"=="                                 = '==' ![=]
"!="                                 = '!=' ![=]
"^"                                  = '^' ![=]
"|"                                  = '|' ![=]
"="                                  = '=' ![=~]
"<=>"                                = '<=>'
"==="                                = '==='
"=~"                                 = '=~'
">="                                 = '>='
"<="                                 = '<='
"**"                                 = '**'
"~"                                  = '~'
"`"                                  = '`'
"+@"                                 = '+@'
"-@"                                 = '-@'
"[]"                                 = '[]'
"[]="                                = '[]='
"("                                  = '('
"=>"                                 = '=>'
"."                                  = '.'
","                                  = ','
"do"                                 = 'do' !W
"end"                                = 'end' !W
"return"                             = 'return' !W
"yield"                              = 'yield' !W
"defined?"                           = 'defined?' !W
"if"                                 = 'if' !W
"elsif"                              = 'elsif' !W
"else"                               = 'else' !W
"unless"                             = 'unless' !W
"while"                              = 'while' !W
"until"                              = 'until' !W
"case"                               = 'case' !W
"when"                               = 'when' !W
"break"                              = 'break' !W
"next"                               = 'next' !W
"redo"                               = 'redo' !W
"for"                                = 'for' !W
"in"                                 = 'in' !W
"begin"                              = 'begin' !W
"rescue"                             = 'rescue' !W
"retry"                              = 'retry' !W
"ensure"                             = 'ensure' !W
"class"                              = 'class' !W
"module"                             = 'module' !W
"def"                                = 'def' !W
"alias"                              = 'alias' !W
"and"                                = 'and' !W
"defined"                            = 'defined' !W
"false"                              = 'false' !W
"nil"                                = 'nil' !W
"not"                                = 'not' !W
"or"                                 = 'or' !W
"self"                               = 'self' !W
"super"                              = 'super' !W
"then"                               = 'then' !W
"true"                               = 'true' !W
"undef"                              = 'undef' !W

// formatted by $ nez format
